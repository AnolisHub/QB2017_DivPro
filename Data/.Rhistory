author: "Katie Beidler"
warnings()
devtools::install_github("rstudio/rmarkdown")
install.packages("devtools")
devtools::install_github("rstudio/rmarkdown")
Sys.setenv("DISPLAY"=":0")
require(shiny)
title: 'Assignment: Temporal Diversity'
author: 'Katie Beidler; Z620: Quantitative Biodiversity, Indiana University'
date: "`r format(Sys.time(), '%d %B, %Y')`"
output: pdf_document
geometry: margin=2.54cm
sessionInfo()
locale
knit_with_parameters('~/GitHub/QB2017_Beidler/Week5-Temporal/temporal_assignment.Rmd')
setwd("/Users/bhbeidler/GitHub/QB2017_DivPro/Data")
package.list = c('vegan', 'tidyr', 'dplyr', 'codyn', 'ggplot2','betapart',
'cowplot', 'MullerPlot', 'RColorBrewer','lubridate', 'reshape2', 'lubridate','wesanderson',
'TTR', 'xtable', 'multcomp', 'pander', 'png', 'grid', 'tseries', 'nlme', 'forecast', 'lsmeans')
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package, repos='http://cran.us.r-project.org')
library(package, character.only = TRUE) }
}
setwd("/Users/bhbeidler/GitHub/QB2017_DivPro/Data")
plant = read.csv("./HF_plants_treat.csv")
nmin = read.csv("./HF_nmin.csv", stringsAsFactors = FALSE)
resp = read.csv("./HF_soilresp.csv", stringsAsFactors = FALSE)
# Making the Site by Species Matrix for the plant data set
plant_sbys = plant[ ,6:43]
# Subsetting the data into the different years
plant_06 = (filter(plant, year == 2006))
plant_07 = (filter(plant, year == 2007))
plant_08 = (filter(plant, year == 2008))
plant_09 = (filter(plant, year == 2009))
# Separating out the treatments from the site by species matrices
plant_06_sbys = plant_06[ ,6:43]
plant_07_sbys = plant_07[ ,6:43]
plant_08_sbys = plant_08[ ,6:43]
plant_09_sbys = plant_09[ ,6:43]
plant$row_id = 1:nrow(plant)
p.id = select(plant,row_id)
select(plant, treatment)
library(dplyr)
select(plant, treatment)
plant.id = plant %>%
group_by(row_id) %>%
select(year,treatment,row_id)
plant$row_id = 1:nrow(plant)
plant.id = plant %>%
select(year,treatment,row_id)
dplyr:: select(year,treatment,row_id)
dplyr::select(plant, year,treatment,row_id)
plant$row_id = 1:nrow(plant)
dplyr::select(plant, row_id, year, treatment)
plant.m = as.matrix(plant_sbys)
setNames(melt(m1), c("row"))
setNames(melt(plant.m), c("row"))
m = setNames(melt(plant.m), c("row"))
View(m)
m = setNames(melt(plant.m), c("row", "count"))
View(m)
m1 = dplyr::select(m, count>0)
m1 = dplyr::select(m, "count>0")
View(m)
m = setNames(melt(plant.m), c('row','species','count'))
View(m)
m1 = dplyr::select(m, "count>0")
p.id = dplyr::select(plant, row_id, year, treatment)
m = setNames(melt(plant.m), c('row','species','count'))
m1 = dplyr::filter(m, count > 0)
View(m1)
install.packages("splitstackshape")
library(splitstackshape)
m1 = dplyr::filter(m, count > 0)
m2 = expandRows(m1, "count")
View(m2)
View(m1)
plant_long = left_join(p.id,m2, by = "row_id")
plant$row_id = 1:nrow(plant)
p.id = dplyr::select(plant, row_id, year, treatment)
plant.m = as.matrix(plant_sbys)
m = setNames(melt(plant.m), c('row_id','species','count'))
m1 = dplyr::filter(m, count > 0)
m2 = expandRows(m1, "count")
plant_long = left_join(p.id,m2, by = "row_id")
View(plant_long)
plant_long = dplyr::select(plant_long, -row_id)
View(plant_long)
plant$row_id = 1:nrow(plant)
p.id = dplyr::select(plant, row_id, year, treatment)
plant.m = as.matrix(plant_sbys)
m1 = setNames(melt(plant.m), c('row_id','species','count'))
m2 = dplyr::filter(m, count > 0)
m3 = expandRows(m1, "count")
plant_long = left_join(p.id,m3, by = "row_id")
plong = dplyr::select(plant_long, -row_id)
setwd("/Users/bhbeidler/GitHub/QB2017_DivPro/Data")
plant = read.csv("./HF_plants_treat.csv")
nmin = read.csv("./HF_nmin.csv", stringsAsFactors = FALSE)
resp = read.csv("./HF_soilresp.csv", stringsAsFactors = FALSE)
# Making the Site by Species Matrix for the plant data set
plant_sbys = plant[ ,6:43]
# Subsetting the data into the different years
plant_06 = (filter(plant, year == 2006))
plant_07 = (filter(plant, year == 2007))
plant_08 = (filter(plant, year == 2008))
plant_09 = (filter(plant, year == 2009))
# Separating out the treatments from the site by species matrices
plant_06_sbys = plant_06[ ,6:43]
plant_07_sbys = plant_07[ ,6:43]
plant_08_sbys = plant_08[ ,6:43]
plant_09_sbys = plant_09[ ,6:43]
plant$row_id = 1:nrow(plant)
p.id = dplyr::select(plant, row_id, year, treatment)
plant.m = as.matrix(plant_sbys)
m1 = setNames(melt(plant.m), c('row_id','species','count'))
m2 = dplyr::filter(m, count > 0)
m3 = expandRows(m1, "count")
View(m3)
plant$row_id = 1:nrow(plant)
p.id = dplyr::select(plant, row_id, year, treatment)
plant.m = as.matrix(plant_sbys)
m1 = setNames(melt(plant.m), c('row_id','species','count'))
m2 = dplyr::filter(m, count > 0)
m3 = expandRows(m2, "count")
plant_long = left_join(p.id,m3, by = "row_id")
plong = dplyr::select(plant_long, -row_id)
View(plong)
plant.taxa.abunds = p_long %>%
group_by(year, species) %>%
count(species)
p_long = dplyr::select(plant_long, -row_id)
plant.taxa.abunds = p_long %>%
group_by(year, species) %>%
count(species)
# Calculate species abundances for each taxonomic group
plant.taxa.abunds = p_long %>%
group_by(year, species) %>%
count(species)
# Calculate total turnover
plant.total = turnover(df = plant.taxa.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "species",
metric = "total")
# Calculate species gained
plant.appearance = turnover(df = plant.taxa.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "species",
metric = "appearance")
# Calculate species lost
plant.disappearance = turnover(df = plant.taxa.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "species",
metric = "disappearance")
plant.total = turnover(df = plant.taxa.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "species",
metric = "total")
plant.taxa.abunds = p_long %>%
group_by(year, species) %>%
count(species)
View(plant.taxa.abunds)
plant.total = turnover(df = plant.taxa.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "species",
metric = "total")
plant.taxa.abunds = p_long %>%
group_by(year, treatment, species) %>%
count(species)
View(plant.taxa.abunds)
plant.total = turnover(df = plant.taxa.abunds, time.var = "year",
species.var = "species",
abundance.var = "n",
replicate.var = "species",
metric = "total")
plant.taxa.abunds = p_long %>%
group_by(year, species) %>%
count(species)
turn.plot = ggplot(plant.taxa.abunds, aes(x = year, y = n, color = treatment)) +
geom_line(size = 1, show.legend = T) + facet_wrap(~taxa, ncol = 1) +
xlim(1977, 2002) +
xlab("Year") +
ylab("abundance") +
theme(legend.position = "bottom") +
scale_color_grey()
plot(turn.plot)
turn.plot = ggplot(plant.taxa.abunds, aes(x = year, y = n, color = treatment)) +
geom_line(size = 1, show.legend = T) + facet_wrap(~species, ncol = 1) +
xlim(1977, 2002) +
xlab("Year") +
ylab("abundance") +
theme(legend.position = "bottom") +
scale_color_grey()
plot(turn.plot)
plant.taxa.abunds = p_long %>%
group_by(year,treatment, species) %>%
count(species)
turn.plot = ggplot(plant.taxa.abunds, aes(x = year, y = n, color = treatment)) +
geom_line(size = 1, show.legend = T) + facet_wrap(~species, ncol = 1) +
xlim(1977, 2002) +
xlab("Year") +
ylab("abundance") +
theme(legend.position = "bottom") +
scale_color_grey()
plot(turn.plot)
gplot(plant.taxa.abunds, aes(x = year, y = n, color = treatment)) +
geom_line(size = 1, show.legend = T) + facet_wrap(~species, ncol = 1) +
xlim(1977, 2002) +
xlab("Year") +
ylab("abundance") +
theme(legend.position = "bottom")
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = treatment)) +
geom_line(size = 1, show.legend = T) + facet_wrap(~species, ncol = 1) +
xlim(1977, 2002) +
xlab("Year") +
ylab("abundance") +
theme(legend.position = "bottom")
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = treatment)) +
geom_line(size = 1, show.legend = T)
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment))
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment)))
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment))
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment)))
as.factor(treatment)
as.factor(plant$treatment)
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment)))
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment))) +
geom_line(size = 1, show.legend = T) + facet_wrap(~species, ncol = 1)
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment))) +
geom_line(size = 1, show.legend = T
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment))) +
geom_line(size = 1, show.legend = T
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment))) +
geom_line(size = 1, show.legend = T)
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = as.factor(treatment))) +geom_line(size = 1, show.legend = T)
plant.taxa.abunds = p_long %>%
group_by(year,treatment, species) %>%
count(species)
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = species)) +geom_line(size = 1, show.legend = T)
ggplot(plant.taxa.abunds, aes(x = year, y = n, color = species)) +geom_line(size = 1, show.legend = T) + facet_wrap(~treatment, ncol = 1)
