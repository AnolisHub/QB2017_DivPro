portal.div.stab <- portal.mean.simp.plot %>%
inner_join(portal.stab.plot)
par(mar = c(5,5,1,1))
plot(portal.div.stab$stability ~ portal.div.stab$mean.simp,
xlab = "", ylab = "", yaxt = "n", xaxt = "n",
xlim = c(2,10), ylim = c(1,4))
axis(side = 1, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 2, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 3, lwd.ticks = 2, las = 1, labels = F)
axis(side = 4, lwd.ticks = 2, las = 1, labels = F)
box(lwd = 2)
mtext("Mean invD", side = 1, line = 3, cex = 1.5)
mtext("Aggregate Stability", side = 2, line = 3.5, cex = 1.5)
mtext(expression(paste("(CV"^"-1"," Total Abundance)")),
side = 2, line = 2.25, cex = .8)
div.stab.lm <- lm(portal.div.stab$stability ~ portal.div.stab$mean.simp)
abline(div.stab.lm)
r2 <- bquote(italic(R)^2 == .(format(
summary(div.stab.lm)$adj.r.square, digits = 3)))
text(3.25,3.75, cex = 1.5, labels = r2)
View(simp.all)
View(rich.all)
View(portal.div.stab)
div.stab.lm
time.by.species <- group_by(portal, year, plot_id,
plot_type) %>% count(species_id) %>% spread(key = species_id, value = n, fill = 0)
richness <- as.data.frame(rowSums(time.by.species[,-c(1:3)] > 0))
rich.all <- data.frame(time.by.species[,1:3,], richness)
names(rich.all)[4] <- "richness"
rich.treat <- rich.all[which(rich.all$plot_type ==
"Control" | rich.all$plot_type == "Rodent Exclosure"), ]
portal.mean.rich.plot <- rich.all %>% group_by(plot_id) %>% summarise(mean.rich = mean(richness))
# Let's take a look at how stability metrics relate to mean richness
portal.plot.abunds <- as.data.frame(
group_by(portal, year, plot_id) %>% count(species_id))
portal.stab.plot <- community_stability(df = portal.plot.abunds,
time.var = "year",
abundance.var = "n",
replicate.var = "plot_id")
# Join richness and stability
portal.div.stab <- portal.mean.rich.plot %>%
inner_join(portal.stab.plot)
par(mar = c(5,5,1,1))
plot(portal.div.stab$stability ~ portal.div.stab$mean.rich,
xlab = "", ylab = "", yaxt = "n", xaxt = "n",
xlim = c(2,10), ylim = c(1,4))
axis(side = 1, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 2, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 3, lwd.ticks = 2, las = 1, labels = F)
axis(side = 4, lwd.ticks = 2, las = 1, labels = F)
box(lwd = 2)
mtext("Mean Richness", side = 1, line = 3, cex = 1.5)
mtext("Aggregate Stability", side = 2, line = 3.5, cex = 1.5)
mtext(expression(paste("(CV"^"-1"," Total Abundance)")),
side = 2, line = 2.25, cex = .8)
div.stab.lm <- lm(portal.div.stab$stability ~ portal.div.stab$mean.rich)
abline(div.stab.lm)
r2 <- bquote(italic(R)^2 == .(format(
summary(div.stab.lm)$adj.r.square, digits = 3)))
text(3.25,3.75, cex = 1.5, labels = r2)
div.stab.lm
summary(div.stab.lm)
portal.mean.simp.plot <- simp.all %>% group_by(plot_id) %>% summarise(mean.simp = mean(invD))
# Let's take a look at how stability metrics relate to mean richness
portal.plot.abunds <- as.data.frame(
group_by(portal, year, plot_id) %>% count(species_id))
portal.stab.plot <- community_stability(df = portal.plot.abunds,
time.var = "year",
abundance.var = "n",
replicate.var = "plot_id")
# Join richness and stability
portal.div.stab <- portal.mean.simp.plot %>%
inner_join(portal.stab.plot)
par(mar = c(5,5,1,1))
plot(portal.div.stab$stability ~ portal.div.stab$mean.simp,
xlab = "", ylab = "", yaxt = "n", xaxt = "n",
xlim = c(2,10), ylim = c(1,4))
axis(side = 1, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 2, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 3, lwd.ticks = 2, las = 1, labels = F)
axis(side = 4, lwd.ticks = 2, las = 1, labels = F)
box(lwd = 2)
mtext("Mean invD", side = 1, line = 3, cex = 1.5)
mtext("Aggregate Stability", side = 2, line = 3.5, cex = 1.5)
mtext(expression(paste("(CV"^"-1"," Total Abundance)")),
side = 2, line = 2.25, cex = .8)
div.stab.lm <- lm(portal.div.stab$stability ~ portal.div.stab$mean.simp)
abline(div.stab.lm)
r2 <- bquote(italic(R)^2 == .(format(
summary(div.stab.lm)$adj.r.square, digits = 3)))
text(3.25,3.75, cex = 1.5, labels = r2)
summary(div.stab.lm)
(div.stab.lm)
#rm(list=ls())
getwd()
#setwd("~/GitHub/QB-2017/Week5-Temporal/")
package.list <- c('vegan', 'tidyr', 'dplyr', 'codyn', 'ggplot2',
'cowplot', 'MullerPlot', 'RColorBrewer', 'reshape2', 'lubridate',
'TTR', 'xtable', 'multcomp', 'pander', 'png', 'grid', 'tseries', 'nlme', 'forecast', 'lsmeans')
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package, repos='http://cran.us.r-project.org')
library(package, character.only = TRUE) }
}
portal <- read.table("data/combined.csv", sep = ",", header = TRUE)
str(portal)
print(length(unique(portal$plot_id)))
print(length(unique(portal$species_id)))
print(length(unique(portal$species)))
#'''attach(portal)
#str(portal)
#mysbs94=filter(portal,year==1994)
#str(mysbs94)
#mysbs94=select(mysbs94,plot_id,species_id)'''
portal2 <- unite(portal, col = date, c(year, month, day), sep = "-", remove = FALSE)
portal3 <- unite(portal2, col = species_id, c(genus, species), sep = "_", remove = FALSE)
time.by.species <- group_by(portal, year, plot_id) %>% count(species_id) %>% spread(key = species_id, value = n, fill = 0)
mysbs82=filter(time.by.species,year==1982)
mysbs82strip<-mysbs82[-c(1,2)]
#dat %>% mutate_each_(funs(factor), l1) %>% mutate_each_(funs(as.numeric), l2)
mysbs82strip<- apply(mysbs82strip,2, as.numeric)
#2
my_type<-portal%>%filter(year==1982)%>%group_by(plot_id,plot_type)%>%count(species_id)%>%spread(key = species_id, value = n, fill = 0)
#3
S.obs <- function(x=""   ){
rowSums(x>0) *1
}#for each row x, take the sum of columns for which x > 0
SimpE <- function(x = ""){
S <- S.obs(x)#obsvd richness
x = as.data.frame(x)
D <- diversity(x, "inv")
E <- (D)/S
return(E)
}
thuggy<-SimpE(mysbs82strip)
#apply(mysbs82strip,1,SimpE)
thugy<-apply(mysbs82strip,1,diversity)
#4
package.list <- c('vegan', 'ade4', 'viridis', 'gplots', 'BiodiversityR', 'indicspecies')
for (package in package.list) {
if (!require(package, character.only=T, quietly=T)) {
install.packages(package)
library(package, character.only=T)
}
}
portal82.db <- vegdist(mysbs82strip, method = "bray", upper = TRUE, diag = TRUE)
portal82.pcoa <- cmdscale(portal82.db, eig = TRUE, k = 3)#do the PCoA
str(portal82.pcoa)
explainvar1 <- round(portal82.pcoa$eig[1] / sum(portal82.pcoa$eig), 3) * 100#for each of the first three eigenvalues, assess what proportion of variance it explains
explainvar2 <- round(portal82.pcoa$eig[2] / sum(portal82.pcoa$eig), 3) * 100
explainvar3 <- round(portal82.pcoa$eig[3] / sum(portal82.pcoa$eig), 3) * 100
sum.eig <- sum(explainvar1, explainvar2, explainvar3)#total amt explained in these 3 dimensions
par(mar = c(5, 5, 1, 2) + 0.1)#structure the figure output
# Initiate Plot
plot(portal82.pcoa$points[ ,1], portal82.pcoa$points[ ,2], ylim = c(-0.2, 0.7), xlab = paste("PCoA 1 (", explainvar1, "%)", sep = ""), ylab = paste("PCoA 2 (", explainvar2, "%)", sep = ""), pch = 16, cex = 1.0, type = "n", cex.lab = 1.5, cex.axis = 1.2, axes = FALSE)
# Add Axes
axis(side = 1, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
axis(side = 2, labels = T, lwd.ticks = 2, cex.axis = 1.2, las = 1)
abline(h = 0, v = 0, lty = 3)
box(lwd = 2)
# Add Points & Labels
points(portal82.pcoa$points[ ,1], portal82.pcoa$points[ ,2],
pch = 19, cex = 3, bg = "#bc8d4f", col = "#bc8d4f")
text(portal82.pcoa$points[ ,1], portal82.pcoa$points[ ,2],
labels = row.names(portal82.pcoa$points))
#Now IDfy the most influential spp
portal82REL <- mysbs82strip
for(i in 1:nrow(mysbs82strip)){
portal82REL[i, ] = mysbs82strip[i, ] / sum(mysbs82strip[i, ])
}
portal82.pcoa2 <- add.spec.scores(portal82.pcoa,portal82REL,method = "pcoa.scores")
##################################
#gives error: Error in is.data.frame(x) :
#(list) object cannot be coerced to type 'double'
##############################
text(portal82.pcoa2$cproj[ ,1], portal82.pcoa2$cproj[ ,2],labels = row.names(portal82.pcoa2$cproj), col = "#802944")
portal82.ward <- hclust(portal82.db, method = "ward.D2")#now visualize phylogenetically
par(mar = c(1, 5, 2, 2) + 0.1)#set up display settings
plot(portal82.ward, main = "Ward's Clustering",ylab = "Squared Bray-Curtis Distance")#plot the tree
#5
mytrtmnts<-c(my_type$plot_type)
adonis(mysbs82strip ~ mytrtmnts, method = "bray", permutations = 999)
#P=0.786.
#1
time.by.spec.2 <- filter(portal, taxa=="Rodent") %>% filter(plot_id==18) %>% group_by(year, month, plot_id) %>% count(species_id)
time.by.spec.2$season <- NA
time.by.spec.2$season <- time.by.spec.2$month %in% c(6:10)
time.by.spec.2$season <- ifelse(time.by.spec.2$season == TRUE, "rain", "norain")
time.by.spec.2<-group_by(time.by.spec.2, year, season)
abund<-count(time.by.spec.2,wt=n)
abund$nn <- abund$nn * 4
abund.ts <- ts(abund$nn, frequency = 2, start = c(1977, 2))
plot.ts(abund.ts, type = "l", ylab = "Rodent Abundance (#/hectare)", xlab = "Time (year)", las = 1, ylim = c(0, 500))
#2
abund.sm <- SMA(abund$nn, n = 2)#used 2 bc we have condensed to hexamonthly datapoints
plot(abund.sm, type = "l", col = "#56e4c6", ylab = "Rodent Abundance (#/hectare)",
xlab = "Sample", las = 1, ylim = c(0, 500))
lines(abund$nn, col = "black")
legend(0, 475, col = c("#56e4c6", "black"), lty = c(1,1),
c("smooth", "non-smooth"), bty = "n", cex = 1)
abund.comp <- decompose(abund.ts)
# decomposition categories
plot(abund.comp)
#3. Test whether your data meet the assumption of stationarity.
adf.raw <- adf.test(abund.ts, alternative = "stationary")
print(adf.raw$p.value)
#for plot #18, the ts is NOT stationary: P=.77
#4. If it does not meet this assumption, explore ways to make your data stationary.
abund.ts.diff <- diff(abund.ts,lag=1)
adf.diff <- adf.test(abund.ts.diff, alternative = "stationary")
adf.diff$p.value
#now P=0.01, so null hypot of nonstationarity is rejected
plot.ts(abund.ts.diff, type = "l", ylab = "Rodent Abundance (#/hectare)", xlab = "Time (year)", las = 1)
#5. Examine and plot time lags using the partial autocorrelation function (PACF) and autocorrelation function (ACR).
acf(abund.ts.diff)
acf(abund.ts)
pacf(abund.ts.diff)
pacf(abund.ts)
#6. Use the tools outlined in the Handout to create an ARMA model.
fit18<-auto.arima(abund.ts,ic="aic",trace=T)
fit18<-arima(abund.ts,c(1,0,0),seasonal=list(order=c(2,1,0),period=2),include.mean=T)
#model is order (1,0,0) with nonzero mean
tsdiag(fit18)
pred18 <- predict(fit18, n.ahead = 20)
ts.plot(abund.ts, pred18$pred, lty = c(1,3))
#1. Create an appropriate data frame for RM-ANOVA (e.g., yearly species abundance values within plots).
# tbs matrix
time.by.speciesRM <- group_by(portal, year, plot_id, plot_type) %>% count(species_id) %>% spread(key = species_id, value = n, fill = 0)
#time.by.speciesRM<- apply(time.by.speciesRM,2, as.numeric)
SimpD <- function(x = ""){
D = 0
N = sum(x)
for (n_i in x){
D = D + (n_i^2)/(N^2)
}
return(D)
}
mysimp <- as.data.frame(1/(SimpD((time.by.speciesRM[,-c(1:3)]))))
# Create df with experimental design and mysimp data
simp.all <- data.frame(time.by.speciesRM[,1:3,], mysimp)
names(simp.all)[4] <- "invD"
#choose two trtmnt types
simp.treat <- simp.all[which(simp.all$plot_type =="Control" | simp.all$plot_type == "Rodent Exclosure"), ]
#2. Calculate the inverse of Simpson's diversity for each year, and plot it as a function of year for the Control and Rodent Exclosure plots.
simp.treat.plot <- group_by(simp.treat, plot_type, year) %>% summarise(mean = mean(invD),sd = sd(invD),n = n(),sem = sd/sqrt(n))
simp.plot <- ggplot(simp.treat.plot, aes(x = year, y = mean, color = plot_type)) + geom_line(size = 1, show.legend = T) + geom_errorbar(aes(ymin = mean - sem, ymax = mean + sem), width = .1) + xlim(1977, 2002) + xlab("Year") + ylab("mysimp")+ scale_color_grey()
plot(simp.plot)
#3. Perform an RM-ANOVA and construct a F-test using the AR(1), compound symmetery, and unstructured covariance structures.
simp.rm <- lme(invD ~ plot_type * year, random = ~ 1 | plot_id,
correlation = corAR1(form = ~ 1 | plot_id),#I do not understand why the factor on this line is plot ID. If there's autocorrelation, shouldn't it be related to the time (viz. year) factor?
data = simp.treat)
#output
summary(simp.rm)
#BIC = 14166.53
# F-test
anova(simp.rm)
#plot type is signif, but neither year nor intxn term is
set.caption("RMANOVA for Portal")
pander(anova(simp.rm))
# lsmeans for time-corrected marginal means
lsmeans(simp.rm, ~plot_type)
#now try other models of covariance structure
simp.rm <- lme(invD ~ plot_type * year, random = ~ 1 | plot_id,
correlation = corAR1(form = ~ "unstructured" | plot_id),#I do not understand why the factor on this line is plot ID. If there's autocorrelation, shouldn't it be related to the time (viz. year) factor?
data = simp.treat)
#output
summary(simp.rm)
#BIC = 14166.53
# F-test
anova(simp.rm)
#plot type is signif, but neither year nor intxn term is
set.caption("RMANOVA for Portal")
pander(anova(simp.rm))
# lsmeans for time-corrected marginal means
lsmeans(simp.rm, ~plot_type)
simp.rm <- lme(invD ~ plot_type * year, random = ~ 1 | plot_id,
correlation = corAR1(form = ~ "compound symmetry" | plot_id),#I do not understand why the factor on this line is plot ID. If there's autocorrelation, shouldn't it be related to the time (viz. year) factor?
data = simp.treat)
#output
summary(simp.rm)
#BIC = 14166.53
# F-test
anova(simp.rm)
#plot type is signif, but neither year nor intxn term is
set.caption("RMANOVA for Portal")
pander(anova(simp.rm))
# lsmeans for time-corrected marginal means
lsmeans(simp.rm, ~plot_type)
#1
portal.species.abunds <- group_by(portal, year, plot_type) %>% count(species_id)
#2
# total turnover
portal.total <- turnover(df = portal.species.abunds, time.var = "year", species.var = "species_id", abundance.var = "n", replicate.var = "plot_type", metric = "total")
# species gained
portal.appearance <- turnover(df = portal.species.abunds,time.var = "year",species.var = "species_id",abundance.var = "n",replicate.var = "plot_type",metric = "appearance")
# species lost
portal.disappearance <- turnover(df = portal.species.abunds,time.var = "year",species.var = "species_id",abundance.var = "n",replicate.var = "plot_type",metric = "disappearance")
portal.turnover <- full_join(portal.total, portal.disappearance) %>% full_join(portal.appearance)
portal.turnover <- gather(portal.turnover, key = metric, value = turnover, total, appearance, disappearance)
#3
TO.plot <- ggplot(portal.turnover, aes(x = year, y = turnover, color = metric)) + geom_line(size = 1, show.legend = T) + facet_wrap(~plot_type, ncol = 1) + xlim(1977, 2002) + xlab("Year") + ylab("Turnover") + theme(legend.position = "bottom") + scale_color_grey()
plot(TO.plot)
myt<-group_by(portal, species_id, year, plot_type) %>% count(species_id)
for (id in myt$species_id){
print(id)
}
plotea<-function(x = ""){
for (item in x){
temp<-filter(myt,species_id==item)
plot(temp$n~temp$year, ylab=item)
}
}
plotea((unique(portal$species_id)))
portal.abunds.cont.rodent <- filter(portal.species.abunds, plot_type == "Rodent Exclosure" | plot_type == "Control")
# Calculate MRS
portal.rankshift <- rank_shift(df = as.data.frame(portal.abunds.cont.rodent), time.var = "year",
species.var = "species_id",
abundance.var = "n",
replicate.var = "plot_type")
# Replace year range w single value to plot
portal.rankshift$year <- as.numeric(substr(portal.rankshift$year_pair, 6, 9))
# now ggplot
rankshift.plot <- ggplot(portal.rankshift, aes(x = year, y = MRS, color = plot_type)) +
geom_line(size = 1) +
xlim(1977, 2002) +
xlab("Year") +
ylab("Mean Rank Shift") +
scale_color_grey()
plot(rankshift.plot)
group_by(portal.rankshift, plot_type) %>% summarise(mean = mean(MRS), cv = sd(MRS)/mean)
#1
portal.species.abunds$tot.abund <- rep(sum(portal.species.abunds$n),length(portal.species.abunds$n))
# Now Hellinger transformation
portal.hellinger.transf <- portal.species.abunds %>%
mutate(hellinger.transf = sqrt(n / tot.abund))
portal.change.int <- rate_change_interval(portal.hellinger.transf,time.var = "year",
species.var = "species_id",
abundance.var = "hellinger.transf",
replicate.var = "plot_type")
rate.plot <- ggplot(portal.change.int, aes(interval, distance)) +
geom_point() +
facet_wrap(~plot_type) +
theme(strip.text.x = element_text(size = 7)) +
stat_smooth(method = "loess", se = F, size = 1) +
ylab("Hellinger Distance") +
xlab("Time Interval (Years)")
#2
rate.plot
#1. Using total abundance as your focal variable, calculate stability (i.e., 1/CV) and synchrony for each plot type.
portal.stab <- community_stability(df = as.data.frame(portal.species.abunds),
time.var = "year",
abundance.var = "n",
replicate.var = "plot_type")
pander(portal.stab)
#2. Test for a biodiversity-stability relationship by regressing community stability on mean richness.
time.by.species <- group_by(portal, year, plot_id,
plot_type) %>% count(species_id) %>% spread(key = species_id, value = n, fill = 0)
richness <- as.data.frame(rowSums(time.by.species[,-c(1:3)] > 0))
rich.all <- data.frame(time.by.species[,1:3,], richness)
names(rich.all)[4] <- "richness"
rich.treat <- rich.all[which(rich.all$plot_type ==
"Control" | rich.all$plot_type == "Rodent Exclosure"), ]
portal.mean.rich.plot <- rich.all %>% group_by(plot_id) %>% summarise(mean.rich = mean(richness))
# Let's take a look at how stability metrics relate to mean richness
portal.plot.abunds <- as.data.frame(
group_by(portal, year, plot_id) %>% count(species_id))
portal.stab.plot <- community_stability(df = portal.plot.abunds,
time.var = "year",
abundance.var = "n",
replicate.var = "plot_id")
# Join richness and stability
portal.div.stab <- portal.mean.rich.plot %>%
inner_join(portal.stab.plot)
par(mar = c(5,5,1,1))
plot(portal.div.stab$stability ~ portal.div.stab$mean.rich,
xlab = "", ylab = "", yaxt = "n", xaxt = "n",
xlim = c(2,10), ylim = c(1,4))
axis(side = 1, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 2, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 3, lwd.ticks = 2, las = 1, labels = F)
axis(side = 4, lwd.ticks = 2, las = 1, labels = F)
box(lwd = 2)
mtext("Mean Richness", side = 1, line = 3, cex = 1.5)
mtext("Aggregate Stability", side = 2, line = 3.5, cex = 1.5)
mtext(expression(paste("(CV"^"-1"," Total Abundance)")),
side = 2, line = 2.25, cex = .8)
div.stab.lm <- lm(portal.div.stab$stability ~ portal.div.stab$mean.rich)
abline(div.stab.lm)
r2 <- bquote(italic(R)^2 == .(format(
summary(div.stab.lm)$adj.r.square, digits = 3)))
text(3.25,3.75, cex = 1.5, labels = r2)
#3. Test for a biodiversity-stability relationship by regressing community stability on mean inverse Simpson's diversity.
portal.mean.simp.plot <- simp.all %>% group_by(plot_id) %>% summarise(mean.simp = mean(invD))
# Let's take a look at how stability metrics relate to mean richness
portal.plot.abunds <- as.data.frame(
group_by(portal, year, plot_id) %>% count(species_id))
portal.stab.plot <- community_stability(df = portal.plot.abunds,
time.var = "year",
abundance.var = "n",
replicate.var = "plot_id")
# Join richness and stability
portal.div.stab <- portal.mean.simp.plot %>%
inner_join(portal.stab.plot)
par(mar = c(5,5,1,1))
plot(portal.div.stab$stability ~ portal.div.stab$mean.simp,
xlab = "", ylab = "", yaxt = "n", xaxt = "n",
xlim = c(2,10), ylim = c(1,4))
axis(side = 1, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 2, cex.axis = 1.2, lwd.ticks = 2, las = 1)
axis(side = 3, lwd.ticks = 2, las = 1, labels = F)
axis(side = 4, lwd.ticks = 2, las = 1, labels = F)
box(lwd = 2)
mtext("Mean invD", side = 1, line = 3, cex = 1.5)
mtext("Aggregate Stability", side = 2, line = 3.5, cex = 1.5)
mtext(expression(paste("(CV"^"-1"," Total Abundance)")),
side = 2, line = 2.25, cex = .8)
div.stab.lm <- lm(portal.div.stab$stability ~ portal.div.stab$mean.simp)
abline(div.stab.lm)
r2 <- bquote(italic(R)^2 == .(format(
summary(div.stab.lm)$adj.r.square, digits = 3)))
text(3.25,3.75, cex = 1.5, labels = r2)
install.packages("catterplots")
library(devtools)
install.packages("devtools")
install_github("Gibbsdavidl/CatterPlots")
library(devtools)
install_github("Gibbsdavidl/CatterPlots")
library(CatterPlots)
?CatterPlots
?CatterPlot
library(CatterPlots)
x <- -10:10
y <- -x^2 + 10
purr <- catplot(xs=x, ys=y, cat=3, catcolor=c(0,1,1,1))
cats(purr, -x, -y, cat=4, catcolor=c(1,0,1,1))
library(CatterPlots)
x <- -10:10
y <- -x^2 + 10
purr <- catplot(xs=x, ys=y, cat=3, catcolor=c(0,1,1,1))
cats(purr, -x, -y, cat=4, catcolor=c(1,0,1,1))
meow <- multicat(xs=x, ys=y, cat=c(1,2,3), catcolor=list(c(1,1,0,1),c(0,1,1,1)), canvas=c(-0.1,1.1, -0.1, 1.1))
morecats(purr, x, 10*sin(x)+40, size=0.05, cat=c(4,5,6), catcolor=list(c(0,0,1,1),c(0,1,0,1)), type="line")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list(c(0,0,0,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list(c(256,0,0,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list(c(1,1,1,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10),
catcolor=list(c(1,0,0,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10,11),
catcolor=list(c(1,0,0,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10,11,12),
catcolor=list(c(1,0,0,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
meow <- multicat(xs=x, ys=rnorm(21),
cat=c(1,2,3,4,5,6,7,8,9,10,11),
catcolor=list(c(1,0,0,1)),
canvas=c(-0.1,1.1, -0.1, 1.1),
xlab="some cats", ylab="other cats", main="Random Cats")
getwd()
setwd("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro")
knitr::opts_chunk$set(echo = TRUE)
clr = function() {
ENV = globalenv()
ll = ls(envir = ENV)
ll = ll[ll != "clr"]
rm(list = ll, envir = ENV)
}
getwd()
#setwd("/Users/bhbeidler/GitHub/QB2017_DivPro")
#setwd("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro")
package.list = c('vegan', 'tidyr', 'dplyr', 'codyn', 'ggplot2', 'cluster',
'cowplot', 'MullerPlot', 'RColorBrewer', 'reshape2', 'lubridate', 'BiodiversityR',
'TTR', 'xtable', 'multcomp', 'pander', 'png', 'grid', 'tseries', 'nlme', 'forecast', 'lsmeans', 'devtools', 'CatterPlots')
for (package in package.list) {
if (!require(package, character.only = TRUE, quietly = TRUE)) {
install.packages(package, repos='http://cran.us.r-project.org')
library(package, character.only = TRUE) }
}
#plant = read.csv("./Data/HF_plants.csv")
#ant = read.csv("./Data/HF_ants.csv")
#nmin = read.csv("./Data/HF_nmin.csv")
#resp = read.csv("./Data/HF_soilresp.csv")
#temp = read.csv("./Data/HF_soiltemp.csv")
plant = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_plants.csv")
ant = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_ants.csv")
nmin = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_nmin.csv")
resp = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_soilresp.csv")
temp = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_soiltemp.csv")
plant = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_plants.csv")
ant = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_ants.csv")
nmin = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_nmin.csv")
resp = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_soilresp.csv")
temp = read.csv("C:\\Users\\rmoge\\GitHub\\QB2017_DivPro\\Data\\HF_soiltemp.csv")
